class A {
    synchronized void foo(B b) {
        String name = Thread.currentThread().getName();
        System.out.println(name + " entered A.foo");

        try {
            Thread.sleep(1000);
        } catch (Exception e) {
            System.out.println("A Interrupted");
        }

        class B {
            synchronized void bar(A a) {
                String name = Thread.currentThread().getName();
                System.out.println(name + " entered B.bar");

                try {
                    Thread.sleep(1000);
                } catch (Exception e) {
                    System.out.println("B Interrupted");
                }
                System.out.println(name + " trying to call A.last");
                a.last();
            }
        }

        void last() {
            System.out.println("Inside A.last");
        }
    }

    class Deadlock implements Runnable {
        A a = new A();
        B b = new B();

        Deadlock() {
            Thread.currentThread().setName("MainThread");
            Thread t = new Thread(this, "RacingThread");
            t.start();
            a.foo(b);
            System.out.println("Back in main thread");
        }

        public void run() {
            b.bar(a);
            System.out.println("Back in other thread");
        }

        public static void main(String args[]) {
            new Deadlock();
        }
    }
}

OUTPUT:

MainThread entered A.foo
RacingThread entered B.bar
RacingThread trying to call A.last
MainThread trying to call B.bar
A Interrupted
Back in other thread
B Interrupted
Back in main thread
Inside A.last
